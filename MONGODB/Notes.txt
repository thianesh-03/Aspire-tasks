capped collection - will only store specified number of documents. If the count exceeds then the first document will replaced or overridden.
syntax - db.createCollection("users",{capped:true,size:100000,max:100});
max- document count, size-total file size

to check whether capped - db.users.isCapped();

to insert only one  value - db.users.insertOne({id:"U001",username:"Thianesh",mobileNum:"9677607312"});

to have our own identifier - db.users.insertOne({_id:"U001",username:"Thianesh",mobileNum:"9677607312"});

to view the values - db.users.find();

to insert many values at once - db.users.insertMany([{id:"U001",username:"Thianesh",mobileNum:"9677607312"},{id:"U002",username:"ganesh",mobileNum:"9677607312"}]);

to see the data in form of json - db.users.find().pretty();

to filter and find documents based on conditions - db.products.find({price:{$lte:'40'}});
price is the key or name and the '40' inside is the value;

comparison query commands:
$eq(equals), $gt (greater than), $gte (greater than or equal to), $lt (less than), $lte (less than or equal to), $ne (not equal to), $in (matches any of the values in the specified array), $nin (does not match any of the values in the specified array).

Logical query:
$and - db.products.find({$and: [{price: {$gt: 100}}, {quantity: {$gt: 10}}]})
$or, $not, $nor

Element Query Operators:
$exists - db.products.find({reviews: {$exists: true}})
$type - db.products.find({price: {$type: "double"}})

Evaluation Query Operators:
$regex (performs a regular expression match on a string field)
$text - db.products.find({$text: {$search: "iPhone"}})
$expr (allows the use of aggregation expressions in queries): db.products.find({$expr: {$gt: ["$quantity", 50]}})

to use aggregate function with match - db.users.aggregate([{ $match: { gender: "male"}},{$group: {_id:"$department", totalSalary: {$sum: "$salary"}}}]);

to delete an document - db.users.deleteOne({"email":"sachin.t@abc"});

to update an document - db.users.updateOne({"email":"sachin.t@abc"}, {"$delete"},{upsert: true});
the upsert is used for making other users to make changes

types of update:
1.update
2.updateOne
3.updateMany

to connect mongodb with node js:
const { MongoClient } = require('mongodb');

// Connection URI
const uri = 'mongodb://127.0.0.1:27017/aspire';

// Create a new MongoClient
const client = new MongoClient(uri);

// Connect to the MongoDB server
async function connectToMongoDB() {
    try {
        await client.connect();

        const db=client.db('aspire')
        const collection=db.collection('user');

        const cursor=collection.find({});

        await cursor.forEach(record=>{
            console.log(record)
        })
        await client.close()
        
    } catch (error) {
        console.error('Error connecting to MongoDB:', error);
    }
}

// Call the function to connect
connectToMongoDB();

to insert many values into the collection:
const inserter = await collection.insertMany([{"_id":7,"firstName": "thianesh","lastName": "g","gender":"male","email": "thianesh.t@abc.com","salary": 10000,"department": { "name":"IT" }},{ "_id":8,"firstName": "nithesh","lastName": "k","gender":"male","email": "nithesh@abc.com","salary": 5500,"department": { "name":"software" }}])

console.log("record inserted with :"+inserter);


Task:

[{_id:P001,"title":"Spring and summershoes","price":20,"quantity":3,"total":60,"discountPercentage":8.71,"discountedPrice":55,"thumbnail":"https://cdn.dummyjson.com/product-images/59/thumbnail.jpg"},{_id:P002,"title":"TC Reusable Silicone Magic Washing Gloves","price":29,"quantity":2,"total":58,"discountPercentage":3.19,"discountedPrice":56,"thumbnail":"https://cdn.dummyjson.com/product-images/88/thumbnail.jpg"},{_id:P003,"title":"Oil Free Moisturizer 100ml","price":40,"quantity":2,"total":80,"discountPercentage":13.1,"discountedPrice":70,"thumbnail":"https://cdn.dummyjson.com/product-images/18/thumbnail.jpg"},{_id:P004,"title":"Wholesale cargo lashing Belt","price":930,"quantity":1,"total":930,"discountPercentage":17.67,"discountedPrice":766,"thumbnail":"https://cdn.dummyjson.com/product-images/95/thumbnail.jpg"}]

"photos":[
  {_id: "PH001","title": "accusamus beatae ad facilis cum similique qui sunt",    "url": "https://via.placeholder.com/600/92c952","likes":6,"dislikes":3},{_id: "PH002","title": "reprehenderit est deserunt velit ipsam","url": "https://via.placeholder.com/600/771796","likes":6,"dislikes":3},{_id:PH003,"title": "officia porro iure quia iusto qui ipsa ut modi","url": "https://via.placeholder.com/600/24f355","likes":6,"dislikes":3},{_id:PH004 ,"title": "culpa odio esse rerum omnis laboriosam voluptate repudiandae","url": "https://via.placeholder.com/600/d32776","likes":6,"dislikes":3},{_id:PH005,"title": "natus nisi omnis corporis facere molestiae rerum in","url": "https://via.placeholder.com/600/f66b97","likes":6,"dislikes":3},{_id: PH006,"title": "accusamus ea aliquid et amet sequi nemo","url": "https://via.placeholder.com/600/56a8c2","likes":6,"dislikes":3}]

  users: {[{"_id":2,"firstName": "Sachin","lastName": "T","gender":"male","email": "sachin.t@abc.com","salary": 8000,"department": { "name":"Finance" }},{ "_id":3,"firstName": "James","lastName": "Bond","gender":"male","email": "jamesb@abc.com","salary": 7500,"department": { "name":"Marketing" }},{ "_id":4,"firstName": "Rosy","lastName": "Brown","gender":"female","email": "rosyb@abc.com","salary": 5000,"department": { "name":"HR" }},{ "_id":5,"firstName": "Kapil","lastName": "D","gender":"male", "email": "kapil.d@abc.com","salary": 4500,"department": { "name":"Finance" }},{ "_id":6,"firstName":"Amitabh","lastName": "B","gender":"male","email": "amitabh.b@abc.com","salary": 7000,"department": { "name":"Marketing" }}]}
