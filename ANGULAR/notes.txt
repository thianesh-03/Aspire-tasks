To create a angular app: ng new appName

To create a angular app with module.ts file (without standalone components): ng new appName --no-standalone

To start the app: ng serve (or) npm start

To create an component: ng generate component componentName

if ng command shows unauthorized then run: Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned

one way binding - values can only be displayed and cannot be changed.

two way binding - values can be changed at any moment and from both the sides. This is done using "ngModel":
    <h1>{{title}}</h1>
    <input type="text" [(ngModel)]="title">
for the form to work we should first import the FormsModule in the imports array in the components.ts file.

string interpolation: {{}}
    -string interpolation can be used for any kind of expressions.
    <h1>{{title}}</h1>
    -for showing functions:

property binding: binding an element with a property.
    <h3 [innerText]="title"></h3>
    here the [innerText] is property and is binded with h tag.

event binding: telling what to do when something is done
    <button (click)="addCount()">click!</button>
    <h2>{{clickCount}}</h2>
    (click) is an event listener
    here every time we press the button the click count will be increased

Directives: used to change behavior, appearance or layout of an element
    ngFor:
        <ul>
        <li *ngFor="let movie of movies">{{ movie }}</li>
        </ul>
        the *ngFor is a directive and let movie is to create an iterator for the movies array. And we are printing it using string interpolation.

    ngIf: 
        This is a condition to make content visible and hidden.
        <input type="checkbox" [(ngModel)]="showMe">
        <p ngIf="showMe">This is a ngIf example para</p>
        This para will be displayed only if the checkbox is true.

Attribute directive:
    ngClass:
        styling can be applied based on class and object.
        <input type="checkbox" [(ngModel)]="applyRed">
        <p [ngClass]="{'primary':applyRed}">sample Text</p>
        This para will be blue colored only if the checkbox is true.

Routing:
Navigating from one page to another.
To do that we have first import routerLink module in app component.
Then import all the components in the route.ts page.
export const routes: Routes = [
    {
        path:"product",
        component:ProductComponent
    },
    {
        path:"accholder",
        component:AccountComponent
    },
    {
        path:"**",
        component:ProductComponent
    }
];

This is the method to create route paths and map them with their components.

<a [routerLink]="'product'">View Product</a>&nbsp;
<a [routerLink]="'accholder'">Account</a>&nbsp;
<router-outlet></router-outlet>

Implement this in the app html page to view the links.

Pipes:
To convert raw data into our expected format.
to convert date data into date format.
{{toDate|date}};
{{toDate|date:'short'}};
{{toDate|date:"medium"}};
{{toDate|date:"fullDate"}}; - Displays the date in full text

String manipulation
{{data|uppercase}};
{{date|lowercase}};

Slice
{{data|slice:5:10}};starting:ending indexes ending index will not be printed.
{{data|slice:-7}} the last 7 indexes will be printed

Price:
{{price|currency:'INR'}} - will include the rupees symbol before the amount.

@Input decorator:
This input decorator is used to send values between parent component to child component.
To do that we need to pace our child class selector inside parent class.
After that import input decorator.
And add the decorator before the child class array.
    @Input('sampleInput') cars:string[] = []; - this is in the child class component
And in the form html page we should change our selector as follows.
    <app-child [sampleInput]='parentArray'></app-child>
Now the whatever the value is added into the parent component array it will also be added to the child class array.

@output decorator:
This output decorator will be present inside child class and it will emit data to the parent class.
@output() dataAdded:EventEmitter<string[]> = new EventEmitter;
addData(){
    this.dataAdded.emit(this.data);
}
and in the selector of the child class in the parent html file
    <app-child (dataAdded)="dataUpdated($event)></app-child>
and in the parent class component file
    dataUpdated(data:string[]){
        this.data=data;
    }

